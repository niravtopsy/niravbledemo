// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'dependencies.gradle'
apply from: 'checkstyle.gradle'

buildscript {
    ext.kotlin_version = '1.3.50'
    ext.kotlinVersion = '1.3.31'
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
//        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'
        classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:2.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jakewharton:butterknife-gradle-plugin:10.2.0"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }

    }

    buildscript {
        repositories {
            google()
            jcenter()
            maven { url 'https://jitpack.io' }
        }
    }

    if (System.env.TRAVIS == 'true') {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 2
            minHeapSize = '128m'
        }
    }

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
